import os
import gzip
import pickle
import envparse
import _pickle as cPickle
from defender.apps import create_app

# CUSTOMIZE: import model to be used
from defender.models.nfs_model import NeedForSpeedModel

import warnings
from sklearn.exceptions import DataConversionWarning
warnings.filterwarnings("ignore", category=UserWarning)


def load_pickle(filename):
    with open(filename, 'rb') as fp:
        obj = cPickle.load(fp)
        return obj

def load_gzip_pickle(filename):
    fp = gzip.open(filename,'rb')
    obj = cPickle.load(fp)
    fp.close()
    return obj

if __name__ == "__main__":
    # retrive config values from environment variables
    model_path = envparse.env("DF_MODEL_PATH", cast=str, default="models/NES_MK1.pkl")
    model_path_2 = envparse.env("DF_MODEL_PATH_2", cast=str, default="models/packer_detection_rf.pkl")
    #model_thresh = envparse.env("DF_MODEL_THRESH", cast=float, default=0.5)
    #model_name = envparse.env("DF_MODEL_NAME", cast=str, default="NES_MK1.pkl")
    # model_ball_thresh = envparse.env("DF_MODEL_BALL_THRESH", cast=float, default=0.25)
    # model_max_history = envparse.env("DF_MODEL_HISTORY", cast=int, default=10_000)

    # construct absolute path to ensure the correct model is loaded
    if not model_path.startswith(os.sep):
        model_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), model_path)

    if not model_path_2.startswith(os.sep):
        model_path_2 = os.path.join(os.path.dirname(os.path.abspath(__file__)), model_path_2)

    # CUSTOMIZE: app and model instance
    model1 = load_pickle(model_path)
    model2 = load_pickle(model_path_2)
    # model = StatefulNNEmberModel(model_gz_path,
    #                              model_thresh,
    #                              model_ball_thresh,
    #                              model_max_history,
    #                              model_name)

    app = create_app(model1, model2)

    import sys
    port = int(sys.argv[1]) if len(sys.argv) == 2 else 8080

    from gevent.pywsgi import WSGIServer
    http_server = WSGIServer(('', port), app)
    print("Server Running...............")
    http_server.serve_forever()

    # curl -XPOST --data-binary @somePEfile http://127.0.0.1:8080/ -H "Content-Type: application/octet-stream"
