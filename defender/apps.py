import lief
import pandas as pd
from flask import Flask, jsonify, request
from defender.customfeatures import PEFeatureExtractor
import random
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import pickle


#import numpy as np
#from customfeatures import PEFeatureExtractor

#extractor = PEFeatureExtractor(feature_version=2)

#features = np.empty((0, 638))
#pe_file_paths = ["/Users/skpaul/mac-tamu/malware-project/malware-sample/7z2401-x64.exe", "/Users/skpaul/mac-tamu/malware-project/malware-sample/77ed461936508b99338a5f7bf93ce4e014eb121ecfa75378b09a307528f3be05.exe"]

#for pe_file_path in pe_file_paths:
#    putty_data = open(pe_file_path, "rb").read()
#    #features = extractor.raw_features(putty_data)
#    features_for_one_pe_file = np.array(extractor.feature_vector(putty_data), dtype=np.float32)
#    print(features_for_one_pe_file.shape)
#    #features = np.transpose(features_for_one_pe_file)
#    #features = features[:-4]
#    features = np.vstack((features, features_for_one_pe_file))
#    print(features.shape)
    
#print(features.shape)


def create_app(model, threshold):
    app = Flask(__name__)
    app.config['model'] = model

    # analyse a sample
    @app.route('/', methods=['POST'])
    def post():
        # curl -XPOST --data-binary @somePEfile http://127.0.0.1:8080/ -H "Content-Type: application/octet-stream"
        if request.headers['Content-Type'] != 'application/octet-stream':
            resp = jsonify({'error': 'expecting application/octet-stream'})
            resp.status_code = 400  # Bad Request
            return resp

        bytez = request.data
        

        try:
            # initialize feature extractor with bytez
            pe_feature_ext = PEFeatureExtractor()
            featureVal = np.array(pe_feature_ext.feature_vector(bytez), dtype=np.float32)
            featureVal = featureVal.reshape(1, -1)
            print(featureVal.shape)
            # extract PE attributes
            #atts = pe_att_ext.extract()
            # transform into a dataframe
            #atts = pd.DataFrame([atts])
            model = app.config['model']

            # query the model
            #result = model.predict_threshold(atts, threshold)[0]
            result = model.predict(featureVal)
            result = int(result[0])
            #result = 1
            print('LABEL = ', result)
        except (lief.bad_format, lief.read_out_of_bound) as e:
            print("Error:", e)
            result = 1


        if not isinstance(result, int) or result not in {0, 1}:
            resp = jsonify({'error': 'unexpected model result (not in [0,1])'})
            resp.status_code = 500  # Internal Server Error
            return resp

        resp = jsonify({'result': result})
        resp.status_code = 200
        return resp

    # get the model info
    @app.route('/model', methods=['GET'])
    def get_model():
        # curl -XGET http://127.0.0.1:8080/model
        resp = jsonify(app.config['model'].model_info())
        resp.status_code = 200
        return resp

    return app
