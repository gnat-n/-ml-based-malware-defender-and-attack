import lief
import pandas as pd
from flask import Flask, jsonify, request
#from defender.customfeatures import PEFeatureExtractor
from defender.features import PEFeatureExtractor
import random
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import pickle


#import numpy as np
#from customfeatures import PEFeatureExtractor

#extractor = PEFeatureExtractor(feature_version=2)

#features = np.empty((0, 638))
#pe_file_paths = ["/Users/skpaul/mac-tamu/malware-project/malware-sample/7z2401-x64.exe", "/Users/skpaul/mac-tamu/malware-project/malware-sample/77ed461936508b99338a5f7bf93ce4e014eb121ecfa75378b09a307528f3be05.exe"]

#for pe_file_path in pe_file_paths:
#    putty_data = open(pe_file_path, "rb").read()
#    #features = extractor.raw_features(putty_data)
#    features_for_one_pe_file = np.array(extractor.feature_vector(putty_data), dtype=np.float32)
#    print(features_for_one_pe_file.shape)
#    #features = np.transpose(features_for_one_pe_file)
#    #features = features[:-4]
#    features = np.vstack((features, features_for_one_pe_file))
#    print(features.shape)
    
#print(features.shape)


def create_app(model1, model2):
    app = Flask(__name__)
    app.config['model1'] = model1
    app.config['model2'] = model2

    # analyse a sample
    @app.route('/', methods=['POST'])
    def post():
        # curl -XPOST --data-binary @somePEfile http://127.0.0.1:8080/ -H "Content-Type: application/octet-stream"
        if request.headers['Content-Type'] != 'application/octet-stream':
            resp = jsonify({'error': 'expecting application/octet-stream'})
            resp.status_code = 400  # Bad Request
            return resp

        bytez = request.data
        final_result = 0

        try:
            # initialize feature extractor with bytez
            pe_feature_ext = PEFeatureExtractor()
            featureVal = np.array(pe_feature_ext.feature_vector(bytez), dtype=np.float64)
            featureVal = featureVal.reshape(1, -1)
            print(featureVal.shape)
            # extract PE attributes
            #atts = pe_att_ext.extract()
            # transform into a dataframe
            #atts = pd.DataFrame([atts])
            model1 = app.config['model1']
            model2 = app.config['model2']
            final_result  = 0

            result1 = model1.predict_proba(featureVal)
            #print(result1)
            #print(result.shape)
            finalPrediction = 0
            if result1[:,1] >= 0.5:
                finalPrediction = 1
            elif result1[:,1] >= 0.45: #0.45 is better so far
                #print("-------------We are considering model2 predict---------")
                result2 = model2.predict(featureVal)
                #print(result2)
                if (result2):
                    finalPrediction = 1
            else:
                finalPrediction = 0
            
            final_result = finalPrediction
            print('LABEL = ', final_result)

        except (lief.bad_format, lief.read_out_of_bound) as e:
            print("Error:", e)
            final_result = 0
            print('LABEL from first exception= ', final_result)

        except Exception as e:
            # Handling any other exception
            #print("An error occurred:", e)
            final_result = 0
            print('LABEL from last exception= ', final_result)

        if not isinstance(final_result, int) or final_result not in {0, 1}:
            resp = jsonify({'error': 'unexpected model result (not in [0,1])'})
            resp.status_code = 500  # Internal Server Error
            return resp

        resp = jsonify({'result': final_result})
        resp.status_code = 200
        return resp

    # get the model info
    @app.route('/model', methods=['GET'])
    def get_model():
        # curl -XGET http://127.0.0.1:8080/model
        resp = jsonify(app.config['model'].model_info())
        resp.status_code = 200
        return resp

    return app
