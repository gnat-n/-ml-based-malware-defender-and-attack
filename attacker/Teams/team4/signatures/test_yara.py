import yara, os

def compile_and_save_malware_rules(rules_dir, extention=".yar"):
    # traverse rules_dir
    rules = []
    for root, dirs, files in os.walk(rules_dir):
        for file in files:
            if file.endswith(extention):
                filepath = os.path.join(root, file)
                try:
                    rule = yara.compile(filepaths={filepath:filepath})
                    rules.append(rule)
                except Exception as e:
                    print(f"Error compiling YARA rule file {filepath}: {e}")
                    continue

    print(f"Loaded {len(rules)} yara files...")
    return rules


def scan(rules):
    rules = yara.load("/root/BytMe_new/signatures/build/yaraGen.yarac")
    
    for root, dirs, files in os.walk("/root/ByteMe_test/datasets"):
        if "gw" in root:
            continue
        total = 0
        mal = 0
        for file in files:
            total += 1
            filepath = os.path.join(root, file)
            # for rule in rules:
            matches = rules.match(filepath)
            if matches:
                mal += 1
                continue
                    # for m in matches:
                    #     print(f"Found match in {filepath}: {m} in {m.namespace}")
        print(f"Scanned {total} files in {root} and found {mal} matches")


rules = compile_and_save_malware_rules(
    rules_dir="/root/BytMe_new/signatures/rules/yaraGen",
    extention=".yar"
)
scan(rules)
