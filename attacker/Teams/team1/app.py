from flask import Flask, request
import os
import lief
import joblib
import tempfile

app = Flask(__name__)

def calculate_mean_entropy(sections):
    entropies = [section.entropy for section in sections]
    return sum(entropies) / len(entropies) if entropies else 0

def extract_file_info(file_content):
    """Extract information from a PE file using lief."""
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(file_content)
        temp_file_path = temp_file.name

    info = []
    binary = lief.PE.parse(temp_file_path)
    info.append(binary.optional_header.sizeof_headers)
    info.append(binary.header.characteristics)
    info.append(binary.optional_header.major_linker_version)
    info.append(binary.optional_header.minor_linker_version)
    info.append(binary.optional_header.sizeof_code)
    info.append(binary.optional_header.sizeof_initialized_data)
    info.append(binary.optional_header.sizeof_uninitialized_data)
    info.append(binary.optional_header.addressof_entrypoint)
    info.append(binary.optional_header.baseof_code)
    info.append(binary.optional_header.baseof_data if hasattr(binary.optional_header, 'baseof_data') else 0)
    info.append(binary.optional_header.imagebase)
    info.append(binary.optional_header.section_alignment)
    info.append(binary.optional_header.file_alignment)
    info.append(binary.optional_header.major_operating_system_version)
    
    info.append(calculate_mean_entropy(binary.sections))
    info.append(len(binary.imports))

    os.unlink(temp_file_path)

    return info

def load_model(model_file):
    """Load the trained Random Forest model."""
    return joblib.load(model_file)

def warm_up():
    """Perform initialization tasks."""
    load_model("rf_model.pkl")
    print("Warm-up completed.")

@app.route('/', methods=['POST'])
def predict():
    file_content = request.data
    file_features = extract_file_info(file_content)
    model = load_model("rf_model.pkl")
    prediction = model.predict_proba([file_features])[0][1]

    if prediction > 0.7:
        result = "1\n"
    else:
        result = "0\n"
    
    return result

if __name__ == '__main__':
    warm_up()
    app.run(debug=True, host='0.0.0.0', port=8080)

