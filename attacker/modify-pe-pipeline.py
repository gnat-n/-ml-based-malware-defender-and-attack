import lief # handles PE files
import os
import subprocess
import pefile

def compress_file_with_upx(file_path):
    try:
        # Running the UPX command
        result = subprocess.run(['upx', file_path], capture_output=True, text=True, check=True)
        #print("UPX Output:", result.stdout)
        #print("Compression successful!")
        return 1
    except subprocess.CalledProcessError as e:
        #print("Failed to compress:", e)
        #print("Error output:", e.stderr)
        return 0


input_mal_dir_path = "/Users/skpaul/mac-tamu/malware-dataset/Attack/evade1"

ntdll_path = "/Users/skpaul/mac-tamu/malware-dataset/Attack/ntdll/ntdll.dll"
ntdll = lief.parse(ntdll_path)

file_cnt = 0
success_cnt = 0
for filename in os.listdir(input_mal_dir_path):

    # Create the full file path
    malware_file_path = os.path.join(input_mal_dir_path, filename)
    # Check if it is a file
    if os.path.isfile(malware_file_path):
        file_cnt +=1

        # if(file_cnt>1):
        #     break
        #print("Working on:", filename)
        dropper = lief.parse(malware_file_path)

        # for imported_library in dropper.imports:
        #     print("Library name: " + imported_library.name)
        #     for func in imported_library.entries:
        #         if not func.is_ordinal:
        #             print(func.name)
        #             print(func.iat_address)
        # Open the ntdll fiile
        
        # Copy timestamps and other stuff
        dropper.header.time_date_stamps = ntdll.header.time_date_stamps
        dropper.optional_header.major_linker_version = ntdll.optional_header.major_linker_version
        dropper.optional_header.minor_linker_version = ntdll.optional_header.minor_linker_version
        dropper.optional_header.major_image_version = ntdll.optional_header.major_image_version
        dropper.optional_header.minor_image_version = ntdll.optional_header.minor_image_version
        dropper.optional_header.major_operating_system_version = ntdll.optional_header.major_operating_system_version
        dropper.optional_header.minor_operating_system_version = ntdll.optional_header.minor_operating_system_version
        dropper.optional_header.major_subsystem_version = ntdll.optional_header.major_subsystem_version
        dropper.optional_header.minor_subsystem_version = ntdll.optional_header.minor_subsystem_version
        

        for imported_library in ntdll.imports:
        # Check if the library already exists in the target PE
            if imported_library.name not in [lib.name for lib in dropper.imports]:
                # Create a new import entry in the target PE if it does not exist
                new_import = lief.PE.Import()
                new_import.name = imported_library.name
                dropper.add_import(new_import)

            # Get the library import in the target PE
            target_library = dropper.get_import(imported_library.name)

            # Gather existing entries in the target library to avoid duplicates
            existing_entries = {entry.name for entry in target_library.entries}

            # Add functions to the target library
            for entry in imported_library.entries:
                if entry.name not in existing_entries:
                    target_library.add_entry(entry.name)



        # Create a new binary with the modifications
        builder = lief.PE.Builder(dropper)
        builder.build()
        builder.write(malware_file_path)
    

        #Apply UPX
        if compress_file_with_upx(malware_file_path):
            success_cnt +=1



print(file_cnt)
print(success_cnt)