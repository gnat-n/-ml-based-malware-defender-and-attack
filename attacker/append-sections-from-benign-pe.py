import lief
import os

def append_sections_to_folder(source_exe, target_folder):
    # Load the source PE file
    source_pe = lief.parse(source_exe)

    # Loop over all files in the target folder
    for filename in os.listdir(target_folder):
        target_path = os.path.join(target_folder, filename)
        if os.path.isfile(target_path):
            print(f"Appending sections to {filename}...")
            try:
                append_sections(source_pe, target_path)
            except Exception as e:
                print(f"Failed to modify {filename}: {str(e)}")

def append_sections(source_pe, target_exe):
    target_pe = lief.parse(target_exe)

    # Determine the starting point for new sections
    last_section = target_pe.sections[-1]
    new_virtual_address = last_section.virtual_address + last_section.virtual_size
    section_alignment = target_pe.optional_header.section_alignment
    file_alignment = target_pe.optional_header.file_alignment
    new_virtual_address = (new_virtual_address + section_alignment - 1) // section_alignment * section_alignment

    for section in source_pe.sections:
        # Example: Skip certain sections
        if section.name.startswith(".text") or section.name.startswith(".data"):
            continue

        new_section = lief.PE.Section(section.name)
        new_section.content = section.content
        new_section.virtual_address = new_virtual_address
        new_section.virtual_size = max(len(section.content), section.virtual_size)
        new_section.sizeof_raw_data = ((len(section.content) + file_alignment - 1) // file_alignment) * file_alignment
        new_section.characteristics = section.characteristics

        # Update the virtual address for the next section
        new_virtual_address += (new_section.virtual_size + section_alignment - 1) // section_alignment * section_alignment

        # Add the new section to the target PE
        target_pe.add_section(new_section)

    # Use the LIEF PE builder to rebuild the PE file
    builder = lief.PE.Builder(target_pe)
    builder.build()  # Automatically rebuild sections
    modified_path = os.path.join(os.path.dirname(target_exe), "modified_" + os.path.basename(target_exe))
    builder.write(modified_path)

    

# Example usage - specify the source EXE and the target directory
source_exe_path = "/Users/skpaul/mac-tamu/malware-dataset/Attack/ntdll/ntdll.dll"
target_directory = "/Users/skpaul/mac-tamu/malware-dataset/Attack/evade1"
append_sections_to_folder(source_exe_path, target_directory)
